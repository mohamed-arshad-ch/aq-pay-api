// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum NotificationType {
  REGISTRATION
  PORTAL_ACCESS
  ADD_MONEY
  TRANSFER_MONEY
  SYSTEM
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  password                String
  firstName               String?
  lastName                String?
  phoneNumber             String?
  role                    UserRole                  @default(USER)
  isPortalAccess          Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  
  // Relations
  accounts                Account[]
  wallet                  Wallet?
  addMoneyTransactions    AddMoneyTransaction[]
  transferMoneyTransactions TransferMoneyTransaction[]
  allTransactions         AllTransaction[]
  notifications           Notification[]
  pushTokens              PushToken[]

  @@map("users")
}

model Account {
  id                      String                    @id @default(cuid())
  accountHolderName       String
  accountNumber           String                    @unique
  ifscCode                String
  userId                  String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  
  // Relations
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transferMoneyTransactions TransferMoneyTransaction[]
  
  @@map("accounts")
}

model Wallet {
  id              String           @id @default(cuid())
  userId          String           @unique
  balance         Decimal          @default(0.00) @db.Decimal(15, 2)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relation to user (one-to-one)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relations to transactions
  allTransactions AllTransaction[]
  
  @@map("wallets")
}

model AddMoneyTransaction {
  id              String            @id @default(cuid())
  amount          Decimal           @db.Decimal(15, 2)
  location        String?
  description     String?
  transactionId   String?
  status          TransactionStatus @default(PENDING)
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relation to user
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relation to all transactions
  allTransaction  AllTransaction?
  
  @@map("add_money_transactions")
}

model TransferMoneyTransaction {
  id              String            @id @default(cuid())
  accountId       String
  amount          Decimal           @db.Decimal(15, 2)
  description     String?
  transactionId   String?
  status          TransactionStatus @default(PENDING)
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  account         Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relation to all transactions
  allTransaction  AllTransaction?
  
  @@map("transfer_money_transactions")
}

model AllTransaction {
  id                        String                      @id @default(cuid())
  orderId                   String                      @unique
  walletId                  String
  userId                    String
  amount                    Decimal                     @db.Decimal(15, 2)
  transactionType           TransactionType
  description               String?
  addMoneyTransactionId     String?                     @unique
  transferMoneyTransactionId String?                    @unique
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  
  // Relations
  wallet                    Wallet                      @relation(fields: [walletId], references: [id], onDelete: Cascade)
  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  addMoneyTransaction       AddMoneyTransaction?        @relation(fields: [addMoneyTransactionId], references: [id])
  transferMoneyTransaction  TransferMoneyTransaction?   @relation(fields: [transferMoneyTransactionId], references: [id])
  
  @@map("all_transactions")
}

model Notification {
  id              String            @id @default(cuid())
  userId          String
  title           String
  message         String
  type            NotificationType
  isRead          Boolean           @default(false)
  relatedId       String?           // ID of related entity (transaction, user, etc.)
  
  // Specific type-based ID fields
  registrationUserId       String?  // For REGISTRATION notifications - stores the registered user ID
  portalAccessUserId       String?  // For PORTAL_ACCESS notifications - stores the user ID whose access was approved/denied
  addMoneyTransactionId    String?  // For ADD_MONEY notifications - stores add money transaction ID
  transferMoneyTransactionId String? // For TRANSFER_MONEY notifications - stores transfer money transaction ID
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relation to user
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model PushToken {
  id              String            @id @default(cuid())
  userId          String
  token           String
  deviceInfo      String?           // Optional device information
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relation to user
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("push_tokens")
}
